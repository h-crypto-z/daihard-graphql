// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class NewTrade extends ethereum.Event {
  get params(): NewTrade__Params {
    return new NewTrade__Params(this);
  }
}

export class NewTrade__Params {
  _event: NewTrade;

  constructor(event: NewTrade) {
    this._event = event;
  }

  get id(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get tradeAddress(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get initiator(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class DAIHardFactory__createdTradesResult {
  value0: Address;
  value1: BigInt;

  constructor(value0: Address, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }
}

export class DAIHardFactory extends ethereum.SmartContract {
  static bind(address: Address): DAIHardFactory {
    return new DAIHardFactory("DAIHardFactory", address);
  }

  founderFeeAddress(): Address {
    let result = super.call(
      "founderFeeAddress",
      "founderFeeAddress():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_founderFeeAddress(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "founderFeeAddress",
      "founderFeeAddress():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  daiContract(): Address {
    let result = super.call("daiContract", "daiContract():(address)", []);

    return result[0].toAddress();
  }

  try_daiContract(): ethereum.CallResult<Address> {
    let result = super.tryCall("daiContract", "daiContract():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  createOpenTrade(
    addressArgs: Array<Address>,
    initiatedByCustodian: boolean,
    uintArgs: Array<BigInt>,
    terms: string,
    _commPubkey: string
  ): Address {
    let result = super.call(
      "createOpenTrade",
      "createOpenTrade(address[2],bool,uint256[8],string,string):(address)",
      [
        ethereum.Value.fromAddressArray(addressArgs),
        ethereum.Value.fromBoolean(initiatedByCustodian),
        ethereum.Value.fromUnsignedBigIntArray(uintArgs),
        ethereum.Value.fromString(terms),
        ethereum.Value.fromString(_commPubkey)
      ]
    );

    return result[0].toAddress();
  }

  try_createOpenTrade(
    addressArgs: Array<Address>,
    initiatedByCustodian: boolean,
    uintArgs: Array<BigInt>,
    terms: string,
    _commPubkey: string
  ): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "createOpenTrade",
      "createOpenTrade(address[2],bool,uint256[8],string,string):(address)",
      [
        ethereum.Value.fromAddressArray(addressArgs),
        ethereum.Value.fromBoolean(initiatedByCustodian),
        ethereum.Value.fromUnsignedBigIntArray(uintArgs),
        ethereum.Value.fromString(terms),
        ethereum.Value.fromString(_commPubkey)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  createCommittedTrade(
    addressArgs: Array<Address>,
    initiatedByCustodian: boolean,
    uintArgs: Array<BigInt>,
    _terms: string,
    _initiatorCommPubkey: string,
    _responderCommPubkey: string
  ): Address {
    let result = super.call(
      "createCommittedTrade",
      "createCommittedTrade(address[3],bool,uint256[7],string,string,string):(address)",
      [
        ethereum.Value.fromAddressArray(addressArgs),
        ethereum.Value.fromBoolean(initiatedByCustodian),
        ethereum.Value.fromUnsignedBigIntArray(uintArgs),
        ethereum.Value.fromString(_terms),
        ethereum.Value.fromString(_initiatorCommPubkey),
        ethereum.Value.fromString(_responderCommPubkey)
      ]
    );

    return result[0].toAddress();
  }

  try_createCommittedTrade(
    addressArgs: Array<Address>,
    initiatedByCustodian: boolean,
    uintArgs: Array<BigInt>,
    _terms: string,
    _initiatorCommPubkey: string,
    _responderCommPubkey: string
  ): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "createCommittedTrade",
      "createCommittedTrade(address[3],bool,uint256[7],string,string,string):(address)",
      [
        ethereum.Value.fromAddressArray(addressArgs),
        ethereum.Value.fromBoolean(initiatedByCustodian),
        ethereum.Value.fromUnsignedBigIntArray(uintArgs),
        ethereum.Value.fromString(_terms),
        ethereum.Value.fromString(_initiatorCommPubkey),
        ethereum.Value.fromString(_responderCommPubkey)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getFounderFee(tradeAmount: BigInt): BigInt {
    let result = super.call(
      "getFounderFee",
      "getFounderFee(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(tradeAmount)]
    );

    return result[0].toBigInt();
  }

  try_getFounderFee(tradeAmount: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getFounderFee",
      "getFounderFee(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(tradeAmount)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  numTrades(): BigInt {
    let result = super.call("numTrades", "numTrades():(uint256)", []);

    return result[0].toBigInt();
  }

  try_numTrades(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("numTrades", "numTrades():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  createdTrades(param0: BigInt): DAIHardFactory__createdTradesResult {
    let result = super.call(
      "createdTrades",
      "createdTrades(uint256):(address,uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return new DAIHardFactory__createdTradesResult(
      result[0].toAddress(),
      result[1].toBigInt()
    );
  }

  try_createdTrades(
    param0: BigInt
  ): ethereum.CallResult<DAIHardFactory__createdTradesResult> {
    let result = super.tryCall(
      "createdTrades",
      "createdTrades(uint256):(address,uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new DAIHardFactory__createdTradesResult(
        value[0].toAddress(),
        value[1].toBigInt()
      )
    );
  }
}

export class CreateOpenTradeCall extends ethereum.Call {
  get inputs(): CreateOpenTradeCall__Inputs {
    return new CreateOpenTradeCall__Inputs(this);
  }

  get outputs(): CreateOpenTradeCall__Outputs {
    return new CreateOpenTradeCall__Outputs(this);
  }
}

export class CreateOpenTradeCall__Inputs {
  _call: CreateOpenTradeCall;

  constructor(call: CreateOpenTradeCall) {
    this._call = call;
  }

  get addressArgs(): Array<Address> {
    return this._call.inputValues[0].value.toAddressArray();
  }

  get initiatedByCustodian(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }

  get uintArgs(): Array<BigInt> {
    return this._call.inputValues[2].value.toBigIntArray();
  }

  get terms(): string {
    return this._call.inputValues[3].value.toString();
  }

  get _commPubkey(): string {
    return this._call.inputValues[4].value.toString();
  }
}

export class CreateOpenTradeCall__Outputs {
  _call: CreateOpenTradeCall;

  constructor(call: CreateOpenTradeCall) {
    this._call = call;
  }

  get value0(): Address {
    return this._call.outputValues[0].value.toAddress();
  }
}

export class CreateCommittedTradeCall extends ethereum.Call {
  get inputs(): CreateCommittedTradeCall__Inputs {
    return new CreateCommittedTradeCall__Inputs(this);
  }

  get outputs(): CreateCommittedTradeCall__Outputs {
    return new CreateCommittedTradeCall__Outputs(this);
  }
}

export class CreateCommittedTradeCall__Inputs {
  _call: CreateCommittedTradeCall;

  constructor(call: CreateCommittedTradeCall) {
    this._call = call;
  }

  get addressArgs(): Array<Address> {
    return this._call.inputValues[0].value.toAddressArray();
  }

  get initiatedByCustodian(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }

  get uintArgs(): Array<BigInt> {
    return this._call.inputValues[2].value.toBigIntArray();
  }

  get _terms(): string {
    return this._call.inputValues[3].value.toString();
  }

  get _initiatorCommPubkey(): string {
    return this._call.inputValues[4].value.toString();
  }

  get _responderCommPubkey(): string {
    return this._call.inputValues[5].value.toString();
  }
}

export class CreateCommittedTradeCall__Outputs {
  _call: CreateCommittedTradeCall;

  constructor(call: CreateCommittedTradeCall) {
    this._call = call;
  }

  get value0(): Address {
    return this._call.outputValues[0].value.toAddress();
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _daiContract(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _founderFeeAddress(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}
